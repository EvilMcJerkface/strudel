/*******************************************************************************
 * Copyright 2015 Junichi Tatemura
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/

package com.nec.strudel.entity;

import com.nec.strudel.entity.info.EntityInfo;
import com.nec.strudel.entity.key.KeyFinder;
import com.nec.strudel.entity.key.KeySetter;

public class KeyGeneratorType {
    /**
     * When the key generation counter is the only member of the group, the name
     * can be omitted. Then, this value is used as a default name.
     */
    public static final String ANONYMOUS_COUNTER__NAME = "c";
    private final String groupName;
    private final String name;
    private final boolean inGroup;
    private final KeyFinder keyFinder;
    private final KeySetter keySetter;

    public static String nameFor(String entityName) {
        return "K_" + entityName;
    }

    /**
     * The key generation counter is maintained outside of the entity's group.
     * It conforms a group by itself.
     */
    public static KeyGeneratorType outofGroup(EntityInfo entity,
            KeyFinder keyFinder, KeySetter keySetter) {
        return new KeyGeneratorType(nameFor(entity.getName()), keyFinder,
                keySetter);
    }

    /**
     * The key generation counter is maintained inside of the entity's group.
     * The counter is updated in the transaction that inserts the entity.
     */
    public static KeyGeneratorType inGroup(EntityInfo entity,
            KeyFinder keyFinder,
            KeySetter keySetter) {
        return new KeyGeneratorType(
                entity.getGroupName(),
                nameFor(entity.getName()),
                true, keyFinder, keySetter);
    }

    public KeyGeneratorType(String name, KeyFinder keyFinder,
            KeySetter keySetter) {
        this.name = ANONYMOUS_COUNTER__NAME;
        this.groupName = name;
        this.inGroup = false;
        this.keyFinder = keyFinder;
        this.keySetter = keySetter;

    }

    public KeyGeneratorType(String groupName, String name, boolean inGroup,
            KeyFinder keyFinder, KeySetter keySetter) {
        this.groupName = groupName;
        this.name = name;
        this.inGroup = inGroup;
        this.keyFinder = keyFinder;
        this.keySetter = keySetter;
    }

    public String getName() {
        return name;
    }

    public String getGroupName() {
        return groupName;
    }

    public boolean isInGroup() {
        return inGroup;
    }

    /**
     * Gets the key that identify a key-generation counter. The combination of
     * this key and a value generated by the key-generation counter must be
     * globally unique in the database.
     * 
     * @param entity
     *            an entity for which part of its key is generated by the
     *            key-generation counter.
     */
    public Object getGeneratorKey(Object entity) {
        return keyFinder.getKey(entity);
    }

    public Object getGroupKey(Object entity) {
        return keyFinder.getKey(entity);
    }

    /**
     * Sets the generated value by a key-generation counter to the entity.
     * 
     * @param entity
     * @param generatedKey
     */
    public void setKey(Object entity, Object generatedKey) {
        keySetter.setKey(entity, generatedKey);
    }

}
